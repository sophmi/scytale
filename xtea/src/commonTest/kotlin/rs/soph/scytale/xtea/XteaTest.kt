package rs.soph.scytale.xtea

import rs.soph.scytale.common.hexToBytes
import rs.soph.scytale.common.hexToInts
import rs.soph.scytale.common.toUpperHexString
import kotlin.test.Test
import kotlin.test.assertContentEquals

class XteaTest {

	@Test
	fun `inputs of zero match`() {
		for ((index, ciphertext) in ZERO_INPUT_KEYS.withIndex()) {
			val key = IntArray(Xtea.KEY_SIZE_INTS)
			val int = index / Int.SIZE_BITS
			key[int] = -0x8000_0000 ushr (index % Int.SIZE_BITS)

			val bytes = ByteArray(Xtea.BLOCK_SIZE_BYTES)
			assertXtea(bytes, key, ciphertext)

			val ints = IntArray(Xtea.BLOCK_SIZE_INTS)
			assertXtea(ints, key, ciphertext)
		}
	}

	@Test
	fun `single set bit inputs match`() {
		for ((index, ciphertext) in SINGLE_SET_BIT_INPUTS.withIndex()) {
			val key = IntArray(Xtea.KEY_SIZE_INTS)

			val bytes = ByteArray(Xtea.BLOCK_SIZE_BYTES)
			val byte = index / Byte.SIZE_BITS
			bytes[byte] = (0x80 ushr (index % Byte.SIZE_BITS)).toByte()
			assertXtea(bytes, key, ciphertext)

			val ints = IntArray(Xtea.BLOCK_SIZE_INTS)
			val int = index / Int.SIZE_BITS
			ints[int] = -0x8000_0000 ushr (index % Int.SIZE_BITS)
			assertXtea(ints, key, ciphertext)
		}
	}

	@Test
	fun `single set bit inputs match when offset`() {
		for ((index, ciphertext) in SINGLE_SET_BIT_INPUTS.withIndex()) {
			val key = IntArray(Xtea.KEY_SIZE_INTS)

			val bytes = ByteArray(1 + Xtea.BLOCK_SIZE_BYTES)
			val byte = 1 + index / Byte.SIZE_BITS
			bytes[byte] = (0x80 ushr (index % Byte.SIZE_BITS)).toByte()
			assertXtea(bytes, key, ciphertext, offset = 1)

			val ints = IntArray(2 + Xtea.BLOCK_SIZE_INTS)
			val int = 2 + index / Int.SIZE_BITS
			ints[int] = -0x8000_0000 ushr (index % Int.SIZE_BITS)
			assertXtea(ints, key, ciphertext, offset = 2)
		}
	}

	@Test
	fun `single set bit inputs match when offset with fixed length`() {
		for ((index, ciphertext) in SINGLE_SET_BIT_INPUTS.withIndex()) {
			val key = IntArray(Xtea.KEY_SIZE_INTS)

			val bytes = ByteArray(9 + Xtea.BLOCK_SIZE_BYTES)
			val byte = 1 + index / Byte.SIZE_BITS
			bytes[byte] = (0x80 ushr (index % Byte.SIZE_BITS)).toByte()
			assertXtea(bytes, key, ciphertext, offset = 1, length = Xtea.BLOCK_SIZE_BYTES)

			val ints = IntArray(5 + Xtea.BLOCK_SIZE_INTS)
			val int = 2 + index / Int.SIZE_BITS
			ints[int] = -0x8000_0000 ushr (index % Int.SIZE_BITS)
			assertXtea(ints, key, ciphertext, offset = 2, length = Xtea.BLOCK_SIZE_INTS)
		}
	}

	@Test
	fun `repeated byte inputs match`() {
		for ((b, ciphertext) in REPEATED_BYTES.withIndex()) {
			val repeated = (b shl 24) or (b shl 16) or (b shl 8) or b // Repeat the byte 4 times to make the int inputs
			val key = IntArray(Xtea.KEY_SIZE_INTS) { repeated }

			val bytes = ByteArray(Xtea.BLOCK_SIZE_BYTES) { b.toByte() }
			assertXtea(bytes, key, ciphertext)

			val ints = IntArray(Xtea.BLOCK_SIZE_INTS) { repeated }
			assertXtea(ints, key, ciphertext)
		}
	}

	@Test
	fun `repeated byte inputs match when offset`() {
		for ((b, ciphertext) in REPEATED_BYTES.withIndex()) {
			val repeated = (b shl 24) or (b shl 16) or (b shl 8) or b // Repeat the byte 4 times to make the int inputs
			val key = IntArray(Xtea.KEY_SIZE_INTS) { repeated }

			val offset = 7
			val bytes = ByteArray(offset + Xtea.BLOCK_SIZE_BYTES) { if (it < offset) 0 else b.toByte() }
			assertXtea(bytes, key, ciphertext, offset)

			val ints = IntArray(offset + Xtea.BLOCK_SIZE_INTS) { if (it < offset) 0 else repeated }
			assertXtea(ints, key, ciphertext, offset)
		}
	}

	@Test
	fun `repeated byte inputs match when offset with fixed length`() {
		for ((b, ciphertext) in REPEATED_BYTES.withIndex()) {
			val repeated = (b shl 24) or (b shl 16) or (b shl 8) or b // Repeat the byte 4 times to make the int inputs
			val key = IntArray(Xtea.KEY_SIZE_INTS) { repeated }

			val offset = 7
			val bytes = ByteArray(offset + Xtea.BLOCK_SIZE_BYTES) { if (it < offset) 0 else b.toByte() }
			assertXtea(bytes, key, ciphertext, offset)

			val ints = IntArray(offset + Xtea.BLOCK_SIZE_INTS) { if (it < offset) 0 else repeated }
			assertXtea(ints, key, ciphertext, offset)
		}
	}

	private fun assertXtea(
		bytes: ByteArray,
		key: IntArray,
		ciphertext: String,
		offset: Int = 0,
		length: Int = bytes.size - offset,
	) {
		val padded = "00".repeat(offset) + ciphertext + "00".repeat(bytes.size - length - offset)

		val buffer = bytes.copyOf()
		Xtea.encipher(buffer, key, offset, length)
		assertContentEquals(padded.hexToBytes(), buffer, "Failed to encipher: ${bytes.toUpperHexString()}")

		Xtea.decipher(buffer, key, offset, length)
		assertContentEquals(bytes, buffer, "Failed to decipher: $ciphertext")
	}

	private fun assertXtea(
		ints: IntArray,
		key: IntArray,
		ciphertext: String,
		offset: Int = 0,
		length: Int = ints.size - offset,
	) {
		val padded = "00000000".repeat(offset) + ciphertext + "00000000".repeat(ints.size - length - offset)

		val buffer = ints.copyOf()
		Xtea.encipher(buffer, key, offset, length)
		assertContentEquals(padded.hexToInts(), buffer, "Failed to encipher: ${ints.toUpperHexString()}")

		Xtea.decipher(buffer, key, offset, length)
		assertContentEquals(ints, buffer, "Failed to decipher: $ciphertext")
	}

	private companion object {

		/**
		 * Ciphertexts for an input with a single set bit and a key of 0, in descending order, e.g.
		 * ```
		 * SINGLE_SET_BIT_INPUTS[0] == encipher(0x80000000_00000000, key = 0)
		 * SINGLE_SET_BIT_INPUTS[63] == encipher(0x1, key = 0)
		 * ```
		 */
		private val SINGLE_SET_BIT_INPUTS = listOf(
			"37A3CBD9F11C28D5", "BA13E75AC2A5A822", "85FC1A1D611EEE20", "5FD951CF2C0EE5B3",
			"8F7BE95C376B4AE8", "2E9D3CEE86A265A7", "4DA8AE5F1B4C72EB", "8104F05BE73B792F",
			"8CC479C5C796BDF5", "DB9624E776FBF690", "0010596E95997CF6", "1DA11BF5EB203169",
			"D84C8B01D9B02C98", "77380F036974AA17", "5AB58FC6A4611DEB", "1B968322FFCCD844",
			"6CBF0995D3378DBC", "529348CD78D44B7C", "D05A15D62D871060", "332426226A827C15",
			"939DA4F4C06FBB50", "0887E46423672943", "62A7765FB86D6555", "2D1774541561E935",
			"A387B6CD9D875463", "054BD4AE7EB2AB0B", "F8581ECE047B514B", "9E596C6099197D34",
			"CF1118300B8A2D38", "AAC63D7962E76615", "B063F59EF08DEE04", "A12E34EE8D374EF5",
			"04A1EA610CBC468B", "82884825FA40F21A", "850438051D12E62B", "D6091EC280935DEA",
			"EF9BF9A02A6B0E4E", "AD3B49321DCDF009", "F36F98736C04059F", "45A1900684AD9AC0",
			"665E0411896D342F", "1C15C6F3BBC1C372", "B679213660BB0F95", "4708A5278930FE0D",
			"C19F3FC0CBDC242B", "38CBBECF65733670", "3D285E63FEAAC3B9", "3560E4C6D544A15C",
			"99759A8F624E55E0", "A576978E82837779", "554466CDF8677820", "C32DBB5807791754",
			"EB4BF9684D3308B9", "1CB0BF5C78304C18", "CAAB743C19D1B177", "981C81403F0B1487",
			"2234EEFE50CBA46B", "7B3797FDCFEBF074", "47BEE85DEE699930", "A1EAF7CF0476AC6B",
			"F97364517E73138D", "75177A2A6DB3458B", "59BBF3ABD6E7B32F", "47186468D1D2343D",
		)

		/**
		 * Ciphertexts for an input of 0 and a key with a single bit set, in descending key order, e.g.
		 * ```
		 * ZERO_INPUT_KEYS[0] == encipher(0, key = 0x80000000_00000000_00000000_00000000)
		 * ZERO_INPUT_KEYS[127] == encipher(0, key = 0x1)
		 * ```
		 */
		private val ZERO_INPUT_KEYS = listOf(
			"057E8C0550151937", "89598070902CD40E", "5FB5B0AD37E48AD6", "3AF684A75A5147FB",
			"D2F3B71258E07935", "BB8712D8971F2DA6", "A38A09D1C9941692", "AC6176429FE586CE",
			"1C2EDBAD8EB5EDF2", "F6E79333A663E1AF", "0163BE481B1FA595", "55437D3BAC4CBC79",
			"B37D26C43061FDA1", "9DB753BFFB7224B2", "F25051857FBD5653", "ADB76B56DE2AF0CC",
			"A96996D3376B41B0", "26292AA3168A1C8F", "2FC8306ECFDB1600", "1D0E78EA21F98780",
			"BBC9E2812B9D2F45", "A2F55FD5B13E7006", "17B8F1FA6D93C9E2", "5DFC2196E32F44E8",
			"874A60AC1BC1DF62", "6B6E03497CF13D3F", "D0B0132855E50656", "CF06D4A07AC9E646",
			"85FF754DD36533C7", "25C504E6598527C0", "3060C4D622544B10", "F6D49F47BEBDA63A",
			"4F190CCFC8DEABFC", "1E92DCE665425870", "3E32351309A4613B", "723EE378CC8335FE",
			"D74B94A6413DDF0A", "D9C38DCF48C27648", "6E76FA73E5C1923C", "2AA2591E2EF2C12C",
			"20F3C626EC8DEECE", "4C98E9FB0FB19996", "4B659BC186112260", "93095547E89C06AE",
			"82A1A38474C48472", "A3571F7AE044856E", "4F6995F57258D1CD", "94B95F169726E564",
			"56D222C4B3C2C8D6", "42B01D4123BFF6F8", "F4F916143731BC7A", "12878F7E038411ED",
			"669F06EC05BFB4F3", "97A286BE6E272CBB", "580C8DC05CF68BAF", "B22B78F250141309",
			"751C895707822EF4", "29FB3245F692F76B", "781D64FF6E5BC204", "86BC4E99C3A08E92",
			"B7FF2C530C823788", "313813ADBEE6108E", "DBED436EBC8173A0", "E7C6923AB603FF42",
			"70AEB3D7177D9093", "122BFD56040FB665", "B61822BFCFFDEB8A", "3AA8CAD543C9C29B",
			"4DB46E34F8CAFDAF", "07FAD5CFA9384AE8", "E380854EAEA76A96", "C071907987323AC4",
			"383D0B8BCAC923E4", "0AAD1D63C2945F73", "9F057AAAC3ACD5C4", "FA51F81F49AE9D66",
			"EEA19D0E6E82264B", "DEDF335FCBB234B2", "E3E532AF56830947", "44A5771DD2537110",
			"3EB533413B8E0A86", "BAF9B99B32C96B06", "9776223F6F90CBCE", "0E4DAFD91F7630FA",
			"C5C4889F42854948", "077CEC6752FA89AD", "71F182C8D8A4445A", "21E76F7295299598",
			"413B0F81AC90390C", "B750EEAFA754CEC2", "F0A8D25E6CF62B7C", "579DDACE1B60B3EE",
			"CFBA07274B8A1F4B", "03EB0C8AF495360F", "EF1C8C7EAEBC9CA7", "6F50086EA5FAC1F8",
			"5612980DEDC8F6AC", "218F4EE454732DAC", "1D79D210533D2DF5", "6B6006BCE161CA40",
			"01D970816E5FAAB0", "7829BB13E3BEB043", "EE0A657F83602539", "A05EE2B67549BED1",
			"C4404652E384E446", "7306D364A6E5EF6D", "0DF4C1F5FAEB430F", "51816E1946ECD779",
			"B460A5D685B0B2F2", "D285EBC617BA85A2", "6C633518C5A87E47", "281941F8F60D2639",
			"0BA76EBE02F3BAC0", "094B157CDB20BE90", "4FB4A4E2C6128D08", "2FBE07F7DCFAECC4",
			"8685885467B52E5C", "3BD49DBFB5A5C64D", "DDF3D83832DCB3A2", "D818E18F03235CD3",
			"D9702927B9EDFEF5", "9CCB14F1F3188CA4", "BA898B48743134DE", "61982E6F0DDEEE07",
			"C6C77EBF05B0548F", "1A5A806001580FBF", "5BED0F1B5A2D1BB0", "5BAC83CE2B9DD3CC",
		)

		/**
		 * Ciphertexts for inputs and keys of the same byte repeated, in ascending order, e.g.
		 * ```
		 * REPEATED_BYTES[1] == encipher(0x01010101_01010101, key = 0x01010101_01010101_01010101_01010101)
		 * REPEATED_BYTES[0x7A] == encipher(0x7A7A7A7A_7A7A7A7A, key = 0x7A7A7A7A_7A7A7A7A_7A7A7A7A_7A7A7A7A)
		 * ```
		 */
		private val REPEATED_BYTES = listOf(
			"DEE9D4D8F7131ED9", "C2ECA7CEC9B7F992", "6DBBA048DA4980D5", "0893C0CEF311D09A",
			"AC57C2F620BCD81F", "42961E9B859A8C7D", "4D15EE81F3212DE4", "7B5C26CE9F0E205F",
			"227E75D2E5ED44B7", "3C372D5CBA6EA9B2", "2871260D5A71C9EC", "ABA81904E6FA6572",
			"37189CAB9C385957", "70D084DCC7211149", "624BE0E58157F64C", "A898F219D312C13B",
			"0193EE11B7A5CC4D", "78D8CD024ECDDBAA", "D6EC2B55C9B585DC", "9FC227635BA55864",
			"AA167A02DF574CB3", "76835DFDCC6CD542", "74F774185BA8FA9B", "7E195671F5A8E8B8",
			"A47D783EC8CDBF28", "C41FAACA8E4D0FB9", "285E17EF2FD2E318", "491CF8D65B10C4D8",
			"345EE5B9BCAD986F", "54442C2BFB68FCAE", "F37E1390DBD22D15", "2B12633ECB40162F",
			"B63A89E38631C79C", "B370C52FA21C5C23", "B4C681EB52AA604F", "9DCEA55B723BC1EC",
			"AF16E40356BE7A26", "5ED66FAAA68FBD6C", "6CC8BABE7BE66934", "EDD367FAC6BA47C2",
			"6F6FBA42F179AAC0", "45C2235DA9CE20F8", "087988ACC74010AE", "FA6E56D6F669A6A3",
			"B60AC5F2ADECB720", "EFA8AA336F688D7B", "F52D9003733E0335", "0E28C8467F07BBFF",
			"EC21033F816D9FFE", "03F67661C7B98EDA", "B7AF74308F740A27", "3A710681A9D67A71",
			"4F3A4A958C96BEDE", "B1194AECE4145808", "2E4558BC7F7C3B22", "BABC0F66E692C3EF",
			"792B6C335E787154", "74E2B7CEA882A183", "17C9C659E8462FD3", "049E0C0E04D0F705",
			"E1FDEF5C2DD78042", "9B9155FA2BE6C82A", "584E6D17646FA958", "EA1954FDA380D726",
			"4B888E74020282C8", "1A399DFFA67635CA", "17474646EA434ECD", "8855BF8C56664D23",
			"1C738E2EC4B2B202", "F6C88D28ED039A67", "8D5B0D47E3157CA8", "7ACF364C19014CAE",
			"308D664807ECDAE5", "06A0F3715F80F0D2", "6823886050523984", "7A0DDE97BFEC5F7C",
			"D3B87D45698DDE3C", "4F5739127EC7C7B2", "2B54D578F851F206", "FECBD598EADEBB8A",
			"DCC652A8517A5742", "0E4C2C7DFB441098", "73FB0D371337EEC0", "BC010EAE08CD36E0",
			"013AA92050E0A55C", "18C1C92B4B78E993", "672C27C1FA9F8FDC", "F9BA99C220CC1229",
			"D4D2D16BBB5301DB", "4C45D27F79844495", "35F54FBAB8B763FD", "11AE6A139C88F010",
			"D879BE552B6E615C", "528DB83D8D4C0E89", "8F231E99D9CA5335", "C40E41BAF5577956",
			"8B25118CAAC69103", "01ABDD1D8D23AA38", "8F37AFEBC7074ACF", "350FFEFC24336CF5",
			"5ADF37F7BDFC3C4A", "CF49B758568C0508", "CDBF60E70AD3FE21", "291B711DD184185A",
			"F38D8249BA600204", "89E6926DC2C2C32A", "0DF6C1B16396277E", "455AC46C4A828FAE",
			"082FB40FA04B8C4C", "C361BD889BF729F2", "C27E57BBB40979FE", "18B45390097A0C2C",
			"BCE072CCE554DF17", "0A0F408DC52B0826", "E233E58B1DED3531", "E323D0AEBC98A570",
			"350544FB23A531F6", "1AF234E26092CD52", "25CA08738D2322B4", "228976A72FA9DA56",
			"AEB7685A09847972", "ECCFC863027AC218", "FFD67FA25C4D4008", "20320DD3161D16BA",
			"4D361240DE2D78C9", "934F21687967AE69", "0356593B4F4594F9", "A9815D67DB9F21F8",
			"5A26375C1DCB6EEC", "E3F18C5F8B445616", "B61EA8A33192FDA4", "7479AA2D845D5AF0",
			"C09C3FFC31C0B4FA", "9336D13FEA3F9557", "AD68F180ABDE3E8C", "6B55314BBC35AA92",
			"0227D9D9CE9036A7", "AF45B52450448EB8", "D3F6B9C4B2A9D02D", "762E5D3664363226",
			"DF4473D3C7150708", "841B3FA419D58F3B", "82DE7FB2BD9AE44D", "C166E556CA141BF7",
			"E851EA6F934A8C88", "EBCBDC15D84898E5", "B857FA7CF30692CE", "EC2AC2BB08EE9AE2",
			"6FD60D673AF73E1E", "F58BC170C372D8D2", "1A7656BA6057631D", "2A04BA10C699EA8F",
			"A265F8B2998F3FF8", "4AD47E6A86097852", "0E0397355865C674", "7160DE4A01F460E2",
			"CEA8E043BB8EE345", "64EBDCB89CBD3C33", "9446A63870E4BD8A", "A92EC0B09F25F32D",
			"6ABB6055E3378E1B", "812A93D73DC1170E", "D0E7686164FBF21E", "9E0DBB606F0A75DA",
			"C372D4FD81F3FC61", "DE89CEEBA4BFCAEB", "E124A6347D5EF4E2", "3173B314F53F448F",
			"E033B6A3529D0CE5", "D1B52825FC10C40C", "8D340C8420C99EA1", "6E1342722EB8E580",
			"CA9E906353D4B541", "C84F0FE2B8A77AFD", "2D3EC4E388043AA1", "92AD8597F5EB6D74",
			"C59FE8645A348DE9", "9E904FA6B3BC3638", "DCC60608158986FC", "65DF92A21AEBBA1B",
			"BDB9A96E198FE6CC", "C0E5A070CDBAB6DB", "04DA8072235F085E", "808FC81DB3066CA0",
			"EDE0990518897EC6", "887E42D1FD71715F", "3A49A43714E5D13D", "DAA90827C5D4DAF6",
			"A0D81F09FA942AD4", "23B03AE46BB683A9", "F06C0932C8CF54EC", "94A9952860C23248",
			"62004DEB3D4F6202", "91513792982D5930", "8D2C4E9CB086BDD4", "DE68F3EA0BA5063A",
			"CCBBF408E1940997", "9E17EA9CD355733E", "D27764F2B359C95E", "B9C0536AE8B2AAAC",
			"AFAAD1E807D79EB4", "B2B7DB49C17A1674", "314A2DDDC25B3B97", "39DF171EFE0BB9A5",
			"D0B4956E2F5CCBEC", "7B6BF7CF44B1F0E3", "E63C9FD15F5E8F96", "69D9D95C59285392",
			"E7430E21C59DFD47", "936101D17899D963", "DC1800F0E68D343D", "C53AC9225BF06006",
			"1AF13C41692C088C", "D3218A9862A41B3D", "A46DFF56E82676CB", "629206D57DB55D32",
			"03BCFA756081000F", "C038C1B07E235041", "83451E38D35AAA42", "E1434CD917BFE9CA",
			"1CF236E6B08C1CD4", "8B34CAEB714E806B", "E93D812EF82AC4A8", "6D8D00CA3A44363A",
			"7CB2C51F3C2BC0A9", "23A8BFCAC71FCACD", "085F381DBECB6808", "05C406253B8BD681",
			"EE82B9DA81F1092D", "A9A8658312EC9E21", "304C11BD68AD0141", "90AF0B1BFDA4BEAC",
			"E465D180BE121564", "D83EF1E2B0C6BEE8", "B88537D3EF1037D9", "63619A230E1AE6F3",
			"6B47005828DB0E54", "5F95F4E139358438", "D32BA8E607BD6D4C", "14E35CF5013B1085",
			"6B24B48CE7BC9FB9", "995C53EBA2FFE670", "0009F46EF04206DC", "294403AB0A0F950B",
			"D0B9B490A5D432A9", "4F0A863C9AF66E64", "605C82F308D45D28", "844467793E8CEF13",
			"9BFCEB92F55477E9", "BCB4E1DE1F1CAEC1", "839E2276D993D011", "D155316ADF5753A5",
			"7BA21F967624E072", "B397264E7ED29963", "C8CD90F1E20846AE", "28FC2891E623566A",
		)
	}
}
