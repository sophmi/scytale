@file:Suppress("NOTHING_TO_INLINE")

package rs.soph.scytale.whirlpool

import rs.soph.scytale.common.longFromBytes

/**
 * Lookup tables used to mix the plaintext bits in a [Whirlpool] input.
 *
 * The tables contain the premultiplication of the linear diffusion layer `θ` with the* non-linear layer `γ`, i.e.
 * the 8x8 circulant MDS matrix multiplied by the substitution box (for each element):
 * ```θ ◦ γ ≡ cir(01, 01, 04, 01, 08, 05, 02, 09) * S_BOX[x]``` where `x ∈ GF(2^8)`.
 *
 * The premultiplication leads to an efficient implementation of `ρ[k]` as suggested in
 * 'The WHIRLPOOL Hashing Function', section 7.1.
 */
internal object DiffusionTables {

	/** Size of the 2^8 Galois field (i.e. the number of distinct values one byte can represent). */
	private const val FIELD_SIZE = 1 shl Byte.SIZE_BITS

	/**
	 * Premultiplied matrices flattened in the form `[x * Matrix.WIDTH + row]` (i.e. indexing gives
	 * the `row`th row of the matrix for an input byte `x`), where `0 <= x < 256` and `0 <= row < 8`.
	 * Each row is a long where the first byte is the element `[row, 0]`, the second byte is `[row, 1]`, etc.
	 */
	private val tables = LongArray(Matrix.WIDTH * FIELD_SIZE)

	/** Non-linear layer `γ(x)` (the substitution box). */
	private val S_BOX = shortArrayOf(
		0x18, 0x23, 0xC6, 0xE8, 0x87, 0xB8, 0x01, 0x4F, 0x36, 0xA6, 0xD2, 0xF5, 0x79, 0x6F, 0x91, 0x52,
		0x60, 0xBC, 0x9B, 0x8E, 0xA3, 0x0C, 0x7B, 0x35, 0x1D, 0xE0, 0xD7, 0xC2, 0x2E, 0x4B, 0xFE, 0x57,
		0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xDA, 0x58, 0xC9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85,
		0xBD, 0x5D, 0x10, 0xF4, 0xCB, 0x3E, 0x05, 0x67, 0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7D, 0x95, 0xD8,
		0xFB, 0xEE, 0x7C, 0x66, 0xDD, 0x17, 0x47, 0x9E, 0xCA, 0x2D, 0xBF, 0x07, 0xAD, 0x5A, 0x83, 0x33,
		0x63, 0x02, 0xAA, 0x71, 0xC8, 0x19, 0x49, 0xD9, 0xF2, 0xE3, 0x5B, 0x88, 0x9A, 0x26, 0x32, 0xB0,
		0xE9, 0x0F, 0xD5, 0x80, 0xBE, 0xCD, 0x34, 0x48, 0xFF, 0x7A, 0x90, 0x5F, 0x20, 0x68, 0x1A, 0xAE,
		0xB4, 0x54, 0x93, 0x22, 0x64, 0xF1, 0x73, 0x12, 0x40, 0x08, 0xC3, 0xEC, 0xDB, 0xA1, 0x8D, 0x3D,
		0x97, 0x00, 0xCF, 0x2B, 0x76, 0x82, 0xD6, 0x1B, 0xB5, 0xAF, 0x6A, 0x50, 0x45, 0xF3, 0x30, 0xEF,
		0x3F, 0x55, 0xA2, 0xEA, 0x65, 0xBA, 0x2F, 0xC0, 0xDE, 0x1C, 0xFD, 0x4D, 0x92, 0x75, 0x06, 0x8A,
		0xB2, 0xE6, 0x0E, 0x1F, 0x62, 0xD4, 0xA8, 0x96, 0xF9, 0xC5, 0x25, 0x59, 0x84, 0x72, 0x39, 0x4C,
		0x5E, 0x78, 0x38, 0x8C, 0xD1, 0xA5, 0xE2, 0x61, 0xB3, 0x21, 0x9C, 0x1E, 0x43, 0xC7, 0xFC, 0x04,
		0x51, 0x99, 0x6D, 0x0D, 0xFA, 0xDF, 0x7E, 0x24, 0x3B, 0xAB, 0xCE, 0x11, 0x8F, 0x4E, 0xB7, 0xEB,
		0x3C, 0x81, 0x94, 0xF7, 0xB9, 0x13, 0x2C, 0xD3, 0xE7, 0x6E, 0xC4, 0x03, 0x56, 0x44, 0x7F, 0xA9,
		0x2A, 0xBB, 0xC1, 0x53, 0xDC, 0x0B, 0x9D, 0x6C, 0x31, 0x74, 0xF6, 0x46, 0xAC, 0x89, 0x14, 0xE1,
		0x16, 0x3A, 0x69, 0x09, 0x70, 0xB6, 0xD0, 0xED, 0xCC, 0x42, 0x98, 0xA4, 0x28, 0x5C, 0xF8, 0x86,
	)

	/**
	 * `(2^8)` Galois field reduction polynomial `2^8 + 2^4 + 2^3 + 2^2 + 1`.
	 */
	private const val FIELD_REDUCTION: Int = 0x11D

	init {
		// Premultiply the linear diffusion layer θ(x) and the non-linear layer γ(x):
		// S_BOX[x] * cir(1, 1, 4, 1, 8, 5, 2, 9)
		repeat(FIELD_SIZE) { x ->
			val v1 = S_BOX[x].toInt()
			val v2 = if (v1 < 0x80) v1 shl 1 else v1 shl 1 xor FIELD_REDUCTION // v1 * 2
			val v4 = if (v2 < 0x80) v2 shl 1 else v2 shl 1 xor FIELD_REDUCTION // v1 * 4
			val v5 = v4 xor v1 // v4 + v1
			val v8 = if (v4 < 0x80) v4 shl 1 else v4 shl 1 xor FIELD_REDUCTION // v1 * 8
			val v9 = v8 xor v1 // v8 + v1

			val first = index(x, row = 0)
			tables[first] = longFromBytes(v1, v1, v4, v1, v8, v5, v2, v9)

			// Circularly rotate each row, e.g. [1, 1, 4, 1, 8, 5, 2, 9] -> [9, 1, 1, 4, 1, 8, 5, 2]
			val last = first + Matrix.WIDTH - 1
			for (row in first..<last) {
				tables[row + 1] = (tables[row] shl 56) or (tables[row] ushr 8)
			}
		}
	}

	/**
	 * Maps an input byte to its diffused counterpart, to mix the bits in the input.
	 *
	 * @param element The element in the field `GF(2^8)`, i.e. the input byte. Must be `[0, 255]`.
	 * @param row The row in the matrix to get.
	 */
	inline operator fun get(element: Int, row: Int): Long {
		return tables[index(element, row)]
	}

	private inline fun index(element: Int, row: Int): Int {
		return element * Matrix.WIDTH + row
	}
}
